name: CI Pipeline

on:
  push:
    branches:
      - master  # Exécute le pipeline sur chaque commit dans master
  pull_request:
    branches:
      - master  # Exécute également sur chaque pull request vers master

jobs:
  build:  # Job pour les tests et le linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'  # Version de Python à utiliser

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Flake8
        run: |
          pip install flake8
          flake8 .

      - name: Run tests with pytest
        env:
          SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        run: |
          pip install pytest pytest-cov
          pytest --cov=. --cov-report=term-missing

  containerize:
  needs: build  # S'exécute uniquement si le job 'build' réussit
  runs-on: ubuntu-latest  # Utilise une machine virtuelle Ubuntu
  steps:
    - name: Checkout repository
      uses: actions/checkout@v3  # Clone le code du dépôt

    - name: Log in to Docker Hub
      env:  # Définit les variables d'environnement pour l'étape
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

    - name: Build and tag Docker image
      run: docker build -t my_app:${{ github.sha }} .  # Construit l'image Docker et utilise le hash du commit comme tag

    - name: Push Docker image to Docker Hub
      run: docker push my_app:${{ github.sha }}  # Pousse l'image Docker sur Docker Hub

