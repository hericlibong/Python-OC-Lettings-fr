name: CI Pipeline

on:
  push:
    branches:
      - master  # Exécute le pipeline sur chaque commit dans master
      - feature/*  # Exécute le pipeline sur chaque commit dans une branche feature
  pull_request:
    branches:
      - master  # Exécute également sur chaque pull request vers master

jobs:
  build:  # Job pour les tests et le linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'  # Version de Python à utiliser

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Flake8
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/feature/*'  # Exécute le linting sur master et les branches feature
        run: |
          pip install flake8
          flake8 .

      - name: Run tests with pytest
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/feature/*'  # Exécute le linting sur master et les branches feature 
        env:
          SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        run: |
          pip install pytest pytest-cov
          pytest --cov=. --cov-report=term-missing
          echo "This steps runs only on master and experimental branches"

  containerize:
    needs: build  # S'exécute uniquement si le job 'build' réussit
    if : github.ref == 'refs/heads/master' # Exécute uniquement le containerize sur master
    runs-on: ubuntu-latest  # Utilise une machine virtuelle Ubuntu
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3  # Clone le code du dépôt

      - name: Log in to Docker Hub
        env:  # Définit les variables d'environnement pour l'étape
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

      - name: Build and tag Docker image
      # Ajout d'un tag unique pour éviter tout conflit avec l'image précédente
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my_app:${{ github.sha }} .
          docker tag ${{ secrets.DOCKER_USERNAME }}/my_app:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/my_app:latest

      # Pousse l'image Docker sur Docker Hub et Ajout de la version "latest"
      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/my_app:${{ github.sha }}  
          docker push ${{ secrets.DOCKER_USERNAME }}/my_app:latest  

        # Ajout d'un délai pour s'assurer que l'image est disponible sur Docker Hub
      - name: Wait for Docker image to be available
        run: sleep 30

  deploy:
    name: Deploy to Render
    needs: containerize
    if: github.ref == 'refs/heads/master' # Exécute uniquement sur master
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Render Deploy
        run: |
          curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"image": "docker.io/'"${{ secrets.DOCKER_USERNAME }}"'/my_app:latest"}'
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
  